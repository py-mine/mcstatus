[project]
name = "mcstatus"
version = "12.0.1"
license = "Apache-2.0"
description = "A library to query Minecraft Servers for their status and capabilities."
readme = "README.md"
authors = [
  { name = "Nathan Adams", email = "dinnerbone@dinnerbone.com" },
  { name = "ItsDrike", email = "itsdrike@protonmail.com" },
  { name = "PerchunPak", email = "perchunpak@gmail.com" },
]
maintainers = [
  { name = "Kevin Tindall", email = "kevinkjt2000@gmail.com" },
  { name = "ItsDrike", email = "itsdrike@protonmail.com" },
  { name = "PerchunPak", email = "perchunpak@gmail.com" },
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: Apache Software License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Games/Entertainment",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: System :: Monitoring",
  "Typing :: Typed",
]
keywords = ["minecraft", "protocol"]
requires-python = ">=3.9"
dependencies = ["asyncio-dgram>=2.1.2", "dnspython>=2.4.2"]

[project.urls]
Documentation = "https://mcstatus.readthedocs.io"
"Source code" = "https://github.com/py-mine/mcstatus"

[tool.uv]
default-groups = ["dev", "lint", "test", "docs"]

[dependency-groups]
dev = ["poethepoet>=0.32.1"]
lint = [
  "pre-commit>=3.3.3",
  "ruff>=0.11.2",
  "pyright>=1.1.322",
  "typing-extensions>=4.7.1",
]
test = [
  "pytest>=7.4,<9.0",
  "pytest-asyncio>=0.23.2,<0.27.0",
  "pytest-cov>=4.1,<7.0",
  "pytest-rerunfailures>=13,<16",
  "coverage>=7.3.0",
  "typing-extensions>=4.12.2",
]
docs = [
  "sphinx>=7.1.2",
  "sphinx-autodoc-typehints>=1.24,<3.0",
  "furo>=2022.12.7",
  "m2r2>=0.3.3",
  "tomli>=2.0.1; python_version < '3.11'",
  "packaging>=24.2",
  "docutils>=0.18.1,<0.21", # temporary fix for https://github.com/CrossNox/m2r2/issues/68
]

[tool.poe.tasks]
_lint_ruff = "ruff check ."
_lint_pyright = "pyright ."

[tool.poe.tasks.build]
cmd = "uv build"
help = "Builds the whl and tar.gz distributions"

[tool.poe.tasks.docs]
cmd = "make -C docs/ html"
help = "Generates documentation locally in html format"

[tool.poe.tasks.format]
cmd = "ruff format"
help = "Runs automatic formatting tools"

[tool.poe.tasks.lint]
sequence = ["_lint_pyright", "_lint_ruff"]
help = "Runs linter tools"

[tool.poe.tasks.pre-commit]
cmd = "pre-commit run --all-files"
help = "Executes commit hook checks on all files"

[tool.poe.tasks.release]
cmd = "uv publish"
deps = ["pre-commit", "test", "build"]
help = "Requires all the checks to pass before building and publishing"

[tool.poe.tasks.test]
cmd = "pytest"
help = "Runs the unit tests"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--strict-markers --doctest-modules --cov=mcstatus --cov-append --cov-branch --cov-report=term-missing -vvv --no-cov-on-fail --asyncio-mode=strict"
testpaths = ["tests"]

# Remove deprecation warning
asyncio_default_fixture_loop_scope = "function"

[tool.pyright]
pythonPlatform = "All"
pythonVersion = "3.9"
typeCheckingMode = "standard"

disableBytesTypePromotions = false
extend_exclude = ["docs/conf.py"]

[tool.ruff]
target-version = "py39"
line-length = 127

[tool.ruff.lint]
select = [
  "F",     # Pyflakes
  "W",     # Pycodestyle (warnings)
  "E",     # Pycodestyle (errors)
  "N",     # pep8-naming
  "ANN",   # flake8-annotations
  "B",     # flake8-bugbear
  "FA",    # flake8-future-annotations
  "TID",   # flake8-tidy-imports
  "UP007", # flake8-new-union-types equivalent rule
  "RUF",   # ruff's custom rules
]

ignore = [
  "ANN002", # Missing type annotation for *args
  "ANN003", # Missing type annotation for **kwargs
  "ANN204", # Missing return type annotation for special method
  "B904",   # Exception raised within try-except should use raise ... from exc
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`

  # Redundant rules with ruff-format:
  "E111",   # Indentation of a non-multiple of 4 spaces
  "E114",   # Comment with indentation  of a non-multiple of 4 spaces
  "E117",   # Checks for over-indented code
  "D206",   # Checks for docstrings indented with tabs
  "D300",   # Checks for docstring that use ''' instead of """
  "Q000",   # Checks of inline strings that use wrong quotes (' instead of ")
  "Q001",   # Multiline string that use wrong quotes (''' instead of """)
  "Q002",   # Checks for docstrings that use wrong quotes (''' instead of """)
  "Q003",   # Checks for avoidable escaped quotes ("\"" -> '"')
  "COM812", # Missing trailing comma (in multi-line lists/tuples/...)
  "COM819", # Prohibited trailing comma (in single-line lists/tuples/...)
  "ISC001", # Single line implicit string concatenation ("hi" "hey" -> "hihey")
  "ISC002", # Multi line implicit string concatenation
]

[tool.ruff.lint.per-file-ignores]
"test_*.py" = [
  "ANN", # flake8-annotations
]
"docs/examples/code/**" = [
  "FA", # flake8-future-annotations
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
order-by-type = false
case-sensitive = true
combine-as-imports = true

# Redundant rules with ruff-format
force-single-line = false       # forces all imports to appear on their own line
force-wrap-aliases = false      # Split imports with multiple members and at least one alias
lines-after-imports = -1        # The number of blank lines to place after imports
lines-between-types = 0         # Number of lines to place between "direct" and import from imports
split-on-trailing-comma = false # if last member of multiline import has a comma, don't fold it to single line

[tool.ruff-formatter]
line-ending = "lf"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
