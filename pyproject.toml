[tool.poetry]
name = "mcstatus"
version = "0.0.0" # version is handled by git tags and poetry-dynamic-versioning
description = "A library to query Minecraft Servers for their status and capabilities."
authors = ["Nathan Adams <dinnerbone@dinnerbone.com>"]
license = "Apache-2.0"
readme = "README.md"
repository = "https://github.com/py-mine/mcstatus"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Monitoring",
    "Typing :: Typed",
]
packages = [
    { include = "mcstatus" },
    { include = "protocol", from = "mcstatus" },
]

[tool.poetry.dependencies]
python = ">=3.8.1,<4"
asyncio-dgram = "^2.1.2"
dnspython = "^2.4.2"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.3.3"
tox = "^3.28.0"
tox-poetry = "0.5.0" # deprecated, no sense in `^`

[tool.poetry.group.test.dependencies]
pytest = ">=7.4,<9.0"
pytest-asyncio = "^0.23.2"
pytest-cov = ">=4.1,<6.0"
pytest-rerunfailures = ">=13,<15"
coverage = "^7.3.0"

[tool.poetry.group.lint.dependencies]
ruff = "0.3.7"
coverage = "^7.3.0"
pyright = "^1.1.322"
typing-extensions = "^4.7.1"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "^7.1.2"
sphinx-autodoc-typehints = ">=1.24,<3.0"
furo = ">=2022.12.7"
m2r2 = "^0.3.3"
tomli = { version = "^2.0.1", markers = "python_version < '3.11'" }
packaging = "24.0"
poetry-dynamic-versioning = "*"  # actual version is in `release` group

[tool.poetry.group.release]
optional = true

[tool.poetry.group.release.dependencies]
twine = ">=4.0.2,<6.0.0"
poetry-dynamic-versioning = "^1.1.0"

[tool.poetry.group.workflow-tox]
optional = true

[tool.poetry.group.workflow-tox.dependencies]
tox-gh-actions = "^2.12.0"
poetry = "^1.5.1"

[tool.poetry.scripts]
mcstatus = 'mcstatus.__main__:main'

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--strict-markers --doctest-modules --cov=mcstatus --cov-append --cov-branch --cov-report=term-missing -vvv --no-cov-on-fail --asyncio-mode=strict"
testpaths = ["tests"]

[tool.poetry-dynamic-versioning]
bump = true
enable = true
style = "pep440"

[tool.ruff]
target-version = "py38"
line-length = 127

[tool.ruff.lint]
select = [
    "F",     # Pyflakes
    "W",     # Pycodestyle (warnigns)
    "E",     # Pycodestyle (errors)
    "N",     # pep8-naming
    "ANN",   # flake8-annotations
    "B",     # flake8-bugbear
    "FA",    # flake8-future-annotations
    "TID",   # flake8-tidy-imports
    "UP007", # flake8-new-union-types equivalent rule
    "RUF",   # ruff's custom rules
]

ignore = [
    "ANN002", # Missing type annotation for *args
    "ANN003", # Missing type annotation for **kwargs
    "ANN101", # Missing type annotation for self in method
    "ANN102", # Missing type annotation for cls in classmethod
    "ANN204", # Missing return type annotation for special method
    "B904",   # Exception raised within try-except should use raise ... from exc
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`

    # Redundant rules with ruff-format:
    "E111",   # Indentation of a non-multiple of 4 spaces
    "E114",   # Comment with indentation  of a non-multiple of 4 spaces
    "E117",   # Cheks for over-indented code
    "D206",   # Checks for docstrings indented with tabs
    "D300",   # Checks for docstring that use ''' instead of """
    "Q000",   # Checks of inline strings that use wrong quotes (' instead of ")
    "Q001",   # Multiline string that use wrong quotes (''' instead of """)
    "Q002",   # Checks for docstrings that use wrong quotes (''' instead of """)
    "Q003",   # Checks for avoidable escaped quotes ("\"" -> '"')
    "COM812", # Missing trailing comma (in multi-line lists/tuples/...)
    "COM819", # Prohibited trailing comma (in single-line lists/tuples/...)
    "ISC001", # Single line implicit string concatenation ("hi" "hey" -> "hihey")
    "ISC002", # Multi line implicit string concatenation
]

[tool.ruff.lint.per-file-ignores]
"test_*.py" = [
    "ANN", # flake8-annotations
]
"docs/examples/code/**" = [
    "FA",  # flake8-future-annotations
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
order-by-type = false
case-sensitive = true
combine-as-imports = true

# Redundant rules with ruff-format
force-single-line = false       # forces all imports to appear on their own line
force-wrap-aliases = false      # Split imports with multiple members and at least one alias
lines-after-imports = -1        # The number of blank lines to place after imports
lines-between-types = 0         # Number of lines to place between "direct" and import from imports
split-on-trailing-comma = false # if last member of multiline import has a comma, don't fold it to single line

[tool.ruff-formatter]
line-ending = "lf"

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"
